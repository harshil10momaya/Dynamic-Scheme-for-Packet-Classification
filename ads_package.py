{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "39f69590",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 1\n",
      "Enter source packet (binary string, e.g., 000110): 000110\n",
      "Enter destination packet (binary string, e.g., 101100): 101100\n",
      "Matched Filters: {'F6', 'F5'}\n",
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 1\n",
      "Enter source packet (binary string, e.g., 000110): 101010\n",
      "Enter destination packet (binary string, e.g., 101100): 010101\n",
      "Matched Filters: {'F2', 'F3'}\n",
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 2\n",
      "Source Tree (Inorder): 6 42 \n",
      "Destination Tree (Inorder): 21 44 \n",
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 3\n",
      "Source Tree (Preorder): 42 6 \n",
      "Destination Tree (Preorder): 21 44 \n",
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 6\n",
      "Exiting the program.\n"
     ]
    }
   ],
   "source": [
    "class SplayTreeNode:\n",
    "    def __init__(self, key):\n",
    "        self.key = key\n",
    "        self.left = None\n",
    "        self.right = None\n",
    "\n",
    "\n",
    "class SplayTree:\n",
    "    def __init__(self):\n",
    "        self.root = None\n",
    "\n",
    "    def insert(self, key):\n",
    "        if self.root is None:\n",
    "            self.root = SplayTreeNode(key)\n",
    "            return\n",
    "\n",
    "        self.root = self._splay(self.root, key)\n",
    "\n",
    "        if self.root.key == key:\n",
    "            return  # Key already exists\n",
    "\n",
    "        new_node = SplayTreeNode(key)\n",
    "\n",
    "        if key < self.root.key:\n",
    "            new_node.right = self.root\n",
    "            new_node.left = self.root.left\n",
    "            self.root.left = None\n",
    "        else:\n",
    "            new_node.left = self.root\n",
    "            new_node.right = self.root.right\n",
    "            self.root.right = None\n",
    "\n",
    "        self.root = new_node\n",
    "\n",
    "    def _splay(self, node, key):\n",
    "        if node is None:\n",
    "            return None\n",
    "\n",
    "        if key < node.key:\n",
    "            if node.left is None:\n",
    "                return node\n",
    "            if key < node.left.key:\n",
    "                node.left.left = self._splay(node.left.left, key)\n",
    "                node = self._rotate_right(node)\n",
    "            elif key > node.left.key:\n",
    "                node.left.right = self._splay(node.left.right, key)\n",
    "                if node.left.right:\n",
    "                    node.left = self._rotate_left(node.left)\n",
    "\n",
    "            return node if node.left is None else self._rotate_right(node)\n",
    "\n",
    "        else:\n",
    "            if node.right is None:\n",
    "                return node\n",
    "            if key > node.right.key:\n",
    "                node.right.right = self._splay(node.right.right, key)\n",
    "                node = self._rotate_left(node)\n",
    "            elif key < node.right.key:\n",
    "                node.right.left = self._splay(node.right.left, key)\n",
    "                if node.right.left:\n",
    "                    node.right = self._rotate_right(node.right)\n",
    "\n",
    "            return node if node.right is None else self._rotate_left(node)\n",
    "\n",
    "    def _rotate_left(self, node):\n",
    "        new_root = node.right\n",
    "        node.right = new_root.left\n",
    "        new_root.left = node\n",
    "        return new_root\n",
    "\n",
    "    def _rotate_right(self, node):\n",
    "        new_root = node.left\n",
    "        node.left = new_root.right\n",
    "        new_root.right = node\n",
    "        return new_root\n",
    "\n",
    "    def inorder(self, node):\n",
    "        if node is not None:\n",
    "            self.inorder(node.left)\n",
    "            print(node.key, end=' ')\n",
    "            self.inorder(node.right)\n",
    "\n",
    "    def preorder(self, node):\n",
    "        if node is not None:\n",
    "            print(node.key, end=' ')\n",
    "            self.preorder(node.left)\n",
    "            self.preorder(node.right)\n",
    "\n",
    "    def splay_search(self, key):\n",
    "        self.root = self._splay(self.root, key)\n",
    "        return self.root is not None and self.root.key == key\n",
    "\n",
    "\n",
    "class PacketClassifier:\n",
    "    def __init__(self):\n",
    "        self.source_filters = {\n",
    "            'F1': ((16, 31), (16, 31)),\n",
    "            'F2': ((32, 63), (16, 31)),\n",
    "            'F3': ((32, 47), (0, 31)),\n",
    "            'F4': ((16, 31), (0, 15)),\n",
    "            'F5': ((0, 15), (32, 63)),\n",
    "            'F6': ((0, 63), (32, 63))\n",
    "        }\n",
    "        self.destination_filters = {\n",
    "            'F1': ((16, 31), (16, 31)),\n",
    "            'F2': ((16, 31), (16, 31)),\n",
    "            'F3': ((0, 31), (0, 31)),\n",
    "            'F4': ((0, 15), (0, 15)),\n",
    "            'F5': ((32, 63), (32, 63)),\n",
    "            'F6': ((32, 63), (32, 63))\n",
    "        }\n",
    "        self.source_tree = SplayTree()\n",
    "        self.destination_tree = SplayTree()\n",
    "\n",
    "    def classify_packet(self, src_packet, dest_packet):\n",
    "        src_int = int(src_packet, 2)\n",
    "        dest_int = int(dest_packet, 2)\n",
    "\n",
    "        matched_filters = set()\n",
    "        for filter_id, (src_range, dest_range) in self.source_filters.items():\n",
    "            if src_range[0] <= src_int <= src_range[1] and dest_range[0] <= dest_int <= dest_range[1]:\n",
    "                matched_filters.add(filter_id)\n",
    "\n",
    "        # Add classified packet to splay trees\n",
    "        self.source_tree.insert(src_int)\n",
    "        self.destination_tree.insert(dest_int)\n",
    "\n",
    "        return matched_filters\n",
    "\n",
    "    def display_inorder(self):\n",
    "        print(\"Source Tree (Inorder): \", end='')\n",
    "        self.source_tree.inorder(self.source_tree.root)\n",
    "        print(\"\\nDestination Tree (Inorder): \", end='')\n",
    "        self.destination_tree.inorder(self.destination_tree.root)\n",
    "        print()\n",
    "\n",
    "    def display_preorder(self):\n",
    "        print(\"Source Tree (Preorder): \", end='')\n",
    "        self.source_tree.preorder(self.source_tree.root)\n",
    "        print(\"\\nDestination Tree (Preorder): \", end='')\n",
    "        self.destination_tree.preorder(self.destination_tree.root)\n",
    "        print()\n",
    "\n",
    "    def search_in_source_tree(self, key):\n",
    "        found = self.source_tree.splay_search(key)\n",
    "        if found:\n",
    "            print(f\"Key {key} found in the source tree and is now splayed.\")\n",
    "        else:\n",
    "            print(f\"Key {key} not found in the source tree.\")\n",
    "\n",
    "    def search_in_destination_tree(self, key):\n",
    "        found = self.destination_tree.splay_search(key)\n",
    "        if found:\n",
    "            print(f\"Key {key} found in the destination tree and is now splayed.\")\n",
    "        else:\n",
    "            print(f\"Key {key} not found in the destination tree.\")\n",
    "\n",
    "\n",
    "def main():\n",
    "    classifier = PacketClassifier()\n",
    "\n",
    "    while True:\n",
    "        print(\"\\nMenu:\")\n",
    "        print(\"1. Classify Packet\")\n",
    "        print(\"2. Inorder Traversal of Splay Trees\")\n",
    "        print(\"3. Preorder Traversal of Splay Trees\")\n",
    "        print(\"4. Search in Source Tree\")\n",
    "        print(\"5. Search in Destination Tree\")\n",
    "        print(\"6. Exit\")\n",
    "\n",
    "        choice = input(\"Enter your choice: \")\n",
    "\n",
    "        if choice == '1':\n",
    "            src_packet = input(\"Enter source packet (binary string, e.g., 000110): \")\n",
    "            dest_packet = input(\"Enter destination packet (binary string, e.g., 101100): \")\n",
    "            matched_filters = classifier.classify_packet(src_packet, dest_packet)\n",
    "            print(\"Matched Filters:\", matched_filters)\n",
    "\n",
    "        elif choice == '2':\n",
    "            classifier.display_inorder()\n",
    "\n",
    "        elif choice == '3':\n",
    "            classifier.display_preorder()\n",
    "\n",
    "        elif choice == '4':\n",
    "            key = int(input(\"Enter key to search in source tree (as integer): \"))\n",
    "            classifier.search_in_source_tree(key)\n",
    "\n",
    "        elif choice == '5':\n",
    "            key = int(input(\"Enter key to search in destination tree (as integer): \"))\n",
    "            classifier.search_in_destination_tree(key)\n",
    "\n",
    "        elif choice == '6':\n",
    "            print(\"Exiting the program.\")\n",
    "            break\n",
    "\n",
    "        else:\n",
    "            print(\"Invalid choice. Please try again.\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "09f2b968",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting graphvizNote: you may need to restart the kernel to use updated packages.\n",
      "  Downloading graphviz-0.20.3-py3-none-any.whl (47 kB)\n",
      "Installing collected packages: graphviz\n",
      "\n",
      "Successfully installed graphviz-0.20.3\n"
     ]
    }
   ],
   "source": [
    "pip install graphviz\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c494953b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 1\n",
      "Enter source packet (binary string, e.g., 000110): 000110\n",
      "Enter destination packet (binary string, e.g., 101100): 101100\n",
      "Matched Filters: {'F5', 'F6'}\n",
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 1\n",
      "Enter source packet (binary string, e.g., 000110): 101010\n",
      "Enter destination packet (binary string, e.g., 101100): 010101\n",
      "Matched Filters: {'F2', 'F3'}\n",
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 1\n",
      "Enter source packet (binary string, e.g., 000110): 110011\n",
      "Enter destination packet (binary string, e.g., 101100): 100111\n",
      "Matched Filters: {'F6'}\n",
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 1\n",
      "Enter source packet (binary string, e.g., 000110): 100011\n",
      "Enter destination packet (binary string, e.g., 101100): 110000\n",
      "Matched Filters: {'F6'}\n",
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 2\n",
      "Source Tree (Inorder): 6 35 42 51 \n",
      "Destination Tree (Inorder): 21 39 44 48 \n",
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n",
      "Enter your choice: 3\n",
      "Source Tree (Preorder): 35 6 42 51 \n",
      "Destination Tree (Preorder): 48 44 39 21 \n",
      "\n",
      "Menu:\n",
      "1. Classify Packet\n",
      "2. Inorder Traversal of Splay Trees\n",
      "3. Preorder Traversal of Splay Trees\n",
      "4. Search in Source Tree\n",
      "5. Search in Destination Tree\n",
      "6. Exit\n"
     ]
    }
   ],
   "source": [
    "class SplayTreeNode:\n",
    "    def __init__(self, key):\n",
    "        self.key = key\n",
    "        self.left = None\n",
    "        self.right = None\n",
    "\n",
    "class SplayTree:\n",
    "    def __init__(self):\n",
    "        self.root = None\n",
    "\n",
    "    def insert(self, key):\n",
    "        if self.root is None:\n",
    "            self.root = SplayTreeNode(key)\n",
    "            return\n",
    "\n",
    "        self.root = self._splay(self.root, key)\n",
    "\n",
    "        if self.root.key == key:\n",
    "            return\n",
    "\n",
    "        new_node = SplayTreeNode(key)\n",
    "\n",
    "        if key < self.root.key:\n",
    "            new_node.right = self.root\n",
    "            new_node.left = self.root.left\n",
    "            self.root.left = None\n",
    "        else:\n",
    "            new_node.left = self.root\n",
    "            new_node.right = self.root.right\n",
    "            self.root.right = None\n",
    "\n",
    "        self.root = new_node\n",
    "\n",
    "    def _splay(self, node, key):\n",
    "        if node is None:\n",
    "            return None\n",
    "\n",
    "        if key < node.key:\n",
    "            if node.left is None:\n",
    "                return node\n",
    "            if key < node.left.key:\n",
    "                node.left.left = self._splay(node.left.left, key)\n",
    "                node = self._rotate_right(node)\n",
    "            elif key > node.left.key:\n",
    "                node.left.right = self._splay(node.left.right, key)\n",
    "                if node.left.right:\n",
    "                    node.left = self._rotate_left(node.left)\n",
    "\n",
    "            return node if node.left is None else self._rotate_right(node)\n",
    "\n",
    "        else:\n",
    "            if node.right is None:\n",
    "                return node\n",
    "            if key > node.right.key:\n",
    "                node.right.right = self._splay(node.right.right, key)\n",
    "                node = self._rotate_left(node)\n",
    "            elif key < node.right.key:\n",
    "                node.right.left = self._splay(node.right.left, key)\n",
    "                if node.right.left:\n",
    "                    node.right = self._rotate_right(node.right)\n",
    "\n",
    "            return node if node.right is None else self._rotate_left(node)\n",
    "\n",
    "    def _rotate_left(self, node):\n",
    "        new_root = node.right\n",
    "        node.right = new_root.left\n",
    "        new_root.left = node\n",
    "        return new_root\n",
    "\n",
    "    def _rotate_right(self, node):\n",
    "        new_root = node.left\n",
    "        node.left = new_root.right\n",
    "        new_root.right = node\n",
    "        return new_root\n",
    "\n",
    "    def inorder(self, node):\n",
    "        if node is not None:\n",
    "            self.inorder(node.left)\n",
    "            print(node.key, end=' ')\n",
    "            self.inorder(node.right)\n",
    "\n",
    "    def preorder(self, node):\n",
    "        if node is not None:\n",
    "            print(node.key, end=' ')\n",
    "            self.preorder(node.left)\n",
    "            self.preorder(node.right)\n",
    "\n",
    "    def splay_search(self, key):\n",
    "        self.root = self._splay(self.root, key)\n",
    "        return self.root is not None and self.root.key == key\n",
    "\n",
    "\n",
    "class PacketClassifier:\n",
    "    def __init__(self):\n",
    "        self.source_filters = {\n",
    "            'F1': ((16, 31), (16, 31)),\n",
    "            'F2': ((32, 63), (16, 31)),\n",
    "            'F3': ((32, 47), (0, 31)),\n",
    "            'F4': ((16, 31), (0, 15)),\n",
    "            'F5': ((0, 15), (32, 63)),\n",
    "            'F6': ((0, 63), (32, 63))\n",
    "        }\n",
    "        self.destination_filters = {\n",
    "            'F1': ((16, 31), (16, 31)),\n",
    "            'F2': ((16, 31), (16, 31)),\n",
    "            'F3': ((0, 31), (0, 31)),\n",
    "            'F4': ((0, 15), (0, 15)),\n",
    "            'F5': ((32, 63), (32, 63)),\n",
    "            'F6': ((32, 63), (32, 63))\n",
    "        }\n",
    "        self.source_tree = SplayTree()\n",
    "        self.destination_tree = SplayTree()\n",
    "\n",
    "    def classify_packet(self, src_packet, dest_packet):\n",
    "        src_int = int(src_packet, 2)\n",
    "        dest_int = int(dest_packet, 2)\n",
    "\n",
    "        matched_filters = set()\n",
    "        for filter_id, (src_range, dest_range) in self.source_filters.items():\n",
    "            if src_range[0] <= src_int <= src_range[1] and dest_range[0] <= dest_int <= dest_range[1]:\n",
    "                matched_filters.add(filter_id)\n",
    "\n",
    "        self.source_tree.insert(src_int)\n",
    "        self.destination_tree.insert(dest_int)\n",
    "\n",
    "        return matched_filters\n",
    "\n",
    "    def display_inorder(self):\n",
    "        print(\"Source Tree (Inorder): \", end='')\n",
    "        self.source_tree.inorder(self.source_tree.root)\n",
    "        print(\"\\nDestination Tree (Inorder): \", end='')\n",
    "        self.destination_tree.inorder(self.destination_tree.root)\n",
    "        print()\n",
    "\n",
    "    def display_preorder(self):\n",
    "        print(\"Source Tree (Preorder): \", end='')\n",
    "        self.source_tree.preorder(self.source_tree.root)\n",
    "        print(\"\\nDestination Tree (Preorder): \", end='')\n",
    "        self.destination_tree.preorder(self.destination_tree.root)\n",
    "        print()\n",
    "\n",
    "    def search_in_source_tree(self, key):\n",
    "        found = self.source_tree.splay_search(key)\n",
    "        if found:\n",
    "            print(f\"Key {key} found in the source tree and is now splayed.\")\n",
    "        else:\n",
    "            print(f\"Key {key} not found in the source tree.\")\n",
    "\n",
    "    def search_in_destination_tree(self, key):\n",
    "        found = self.destination_tree.splay_search(key)\n",
    "        if found:\n",
    "            print(f\"Key {key} found in the destination tree and is now splayed.\")\n",
    "        else:\n",
    "            print(f\"Key {key} not found in the destination tree.\")\n",
    "\n",
    "classifier = PacketClassifier()\n",
    "\n",
    "while True:\n",
    "    print(\"\\nMenu:\")\n",
    "    print(\"1. Classify Packet\")\n",
    "    print(\"2. Inorder Traversal of Splay Trees\")\n",
    "    print(\"3. Preorder Traversal of Splay Trees\")\n",
    "    print(\"4. Search in Source Tree\")\n",
    "    print(\"5. Search in Destination Tree\")\n",
    "    print(\"6. Exit\")\n",
    "\n",
    "    choice = input(\"Enter your choice: \")\n",
    "\n",
    "    if choice == '1':\n",
    "        src_packet = input(\"Enter source packet (binary string, e.g., 000110): \")\n",
    "        dest_packet = input(\"Enter destination packet (binary string, e.g., 101100): \")\n",
    "        matched_filters = classifier.classify_packet(src_packet, dest_packet)\n",
    "        print(\"Matched Filters:\", matched_filters)\n",
    "\n",
    "    elif choice == '2':\n",
    "        classifier.display_inorder()\n",
    "\n",
    "    elif choice == '3':\n",
    "        classifier.display_preorder()\n",
    "\n",
    "    elif choice == '4':\n",
    "        key = int(input(\"Enter key to search in source tree (as integer): \"))\n",
    "        classifier.search_in_source_tree(key)\n",
    "\n",
    "    elif choice == '5':\n",
    "        key = int(input(\"Enter key to search in destination tree (as integer): \"))\n",
    "        classifier.search_in_destination_tree(key)\n",
    "\n",
    "    elif choice == '6':\n",
    "        print(\"Exiting the program.\")\n",
    "        break\n",
    "\n",
    "    else:\n",
    "        print(\"Invalid choice. Please try again.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56355863",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
